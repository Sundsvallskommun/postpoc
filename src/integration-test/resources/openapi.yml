openapi: 3.0.1
info:
  title: Postportalservice
  contact: {}
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: "3.0"
servers:
- url: http://localhost:53309
  description: Generated server url
paths:
  /{municipalityId}/precheck:
    post:
      tags:
      - Precheck Resources
      summary: "Checks how a recipient can be contacted, digital post or physical\
        \ letter"
      operationId: precheckRecipients
      parameters:
      - name: X-Sent-By
        in: header
        required: true
        schema:
          type: string
      - name: municipalityId
        in: path
        description: Municipality ID
        required: true
        schema:
          type: string
        example: 2281
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrecheckRequest"
        required: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrecheckResponse"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "502":
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/precheck/kivra:
    post:
      tags:
      - Precheck Resources
      summary: Check if the given partyIds are eligible for receiving digital registered
        letters with Kivra
      operationId: checkKivraEligibility
      parameters:
      - name: municipalityId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KivraEligibilityRequest"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "502":
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/messages/sms:
    post:
      tags:
      - Message Resources
      summary: Send an SMS
      operationId: sendSms
      parameters:
      - name: X-Sent-By
        in: header
        required: true
        schema:
          type: string
      - name: municipalityId
        in: path
        description: Municipality ID
        required: true
        schema:
          type: string
        example: 2281
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SmsRequest"
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "502":
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/messages/registered-letter:
    post:
      tags:
      - Message Resources
      summary: Send a digital registered letter.
      operationId: sendDigitalRegisteredLetter
      parameters:
      - name: X-Sent-By
        in: header
        required: true
        schema:
          type: string
      - name: municipalityId
        in: path
        description: Municipality ID
        required: true
        schema:
          type: string
        example: 2281
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - attachments
              - request
              type: object
              properties:
                request:
                  $ref: "#/components/schemas/DigitalRegisteredLetterRequest"
                attachments:
                  type: array
                  items:
                    type: string
                    format: binary
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "502":
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/messages/letter:
    post:
      tags:
      - Message Resources
      summary: Send a message by either digital mail or as a physical letter. Digital
        mail is always preferred if possible.
      operationId: sendLetter
      parameters:
      - name: X-Sent-By
        in: header
        required: true
        schema:
          type: string
      - name: municipalityId
        in: path
        description: Municipality ID
        required: true
        schema:
          type: string
        example: 2281
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - attachments
              - request
              type: object
              properties:
                request:
                  $ref: "#/components/schemas/LetterRequest"
                attachments:
                  type: array
                  items:
                    type: string
                    format: binary
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "502":
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/messages/letter/csv:
    post:
      tags:
      - Message Resources
      summary: Send a message by either digital mail or as a physical letter. Digital
        mail is always preferred if possible.
      operationId: sendLetterCSV
      parameters:
      - name: X-Sent-By
        in: header
        required: true
        schema:
          type: string
      - name: municipalityId
        in: path
        description: Municipality ID
        required: true
        schema:
          type: string
        example: 2281
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - csv-file
              - request
              type: object
              properties:
                request:
                  $ref: "#/components/schemas/LetterCsvRequest"
                csv-file:
                  type: string
                  format: binary
                attachments:
                  type: array
                  items:
                    type: string
                    format: binary
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "502":
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/statistics/departments:
    get:
      tags:
      - Statistics Resources
      summary: Get general statistics for each department within the municipality
      operationId: getStatisticsByDepartment
      parameters:
      - name: municipalityId
        in: path
        description: Municipality ID
        required: true
        schema:
          type: string
        example: 2281
      - name: year
        in: query
        description: Filter statistics by year
        required: true
        schema:
          pattern: "[0-9]{4}"
          type: string
      - name: month
        in: query
        description: Filter statistics by month
        required: true
        schema:
          pattern: "^0?[1-9]$|^1[0-2]$"
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Statistics"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "502":
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/history/users/{userId}/messages:
    get:
      tags:
      - History Resources
      summary: Get messages sent by user
      operationId: getUserMessages
      parameters:
      - name: municipalityId
        in: path
        description: Municipality ID
        required: true
        schema:
          type: string
        example: 2281
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
        example: joe01doe
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "502":
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/history/users/{userId}/messages/{messageId}:
    get:
      tags:
      - History Resources
      summary: Get messages details
      operationId: getMessageDetails
      parameters:
      - name: municipalityId
        in: path
        description: Municipality ID
        required: true
        schema:
          type: string
        example: 2281
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
        example: joe01doe
      - name: messageId
        in: path
        description: Message ID
        required: true
        schema:
          type: string
        example: 9ce333ec-a473-438b-8406-a71e957dc107
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDetails"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "502":
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/history/messages/{messageId}/signinginfo:
    get:
      tags:
      - History Resources
      summary: Get signing information
      description: Retrieves signing information connected to letter matching provided
        id
      operationId: getSigningInformation
      parameters:
      - name: municipalityId
        in: path
        description: Municipality ID
        required: true
        schema:
          type: string
        example: 2281
      - name: messageId
        in: path
        description: Message ID
        required: true
        schema:
          type: string
        example: 9ce333ec-a473-438b-8406-a71e957dc107
      responses:
        "200":
          description: Successful Operation - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SigningInformation"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "502":
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/attachments/{attachmentId}:
    get:
      tags:
      - Attachment Resources
      summary: Downloads letter attachment content
      description: Retrieves attachment content by id
      operationId: downloadAttachment
      parameters:
      - name: municipalityId
        in: path
        required: true
        schema:
          type: string
      - name: attachmentId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation - OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "502":
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /api-docs:
    get:
      tags:
      - API
      summary: OpenAPI
      operationId: getApiDocs
      responses:
        "200":
          description: OK
          content:
            application/yaml:
              schema:
                type: string
      x-auth-type: None
      x-throttling-tier: Unlimited
      x-wso2-mutual-ssl: Optional
components:
  schemas:
    PrecheckRequest:
      required:
      - partyIds
      type: object
      properties:
        partyIds:
          minItems: 1
          type: array
          description: List of party ids to precheck
          example:
          - b46f0ca2-d2ad-43e8-8d50-3aeb949e3604
          - fd99a03c-790c-4b87-bc4b-f4f73e4a2df4
          items:
            type: string
            description: List of party ids to precheck
            example: "[\"b46f0ca2-d2ad-43e8-8d50-3aeb949e3604\",\"fd99a03c-790c-4b87-bc4b-f4f73e4a2df4\"\
              ]"
      description: Precheck request model
    Problem:
      type: object
      properties:
        instance:
          type: string
          format: uri
        type:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        status:
          $ref: "#/components/schemas/StatusType"
        title:
          type: string
        detail:
          type: string
    StatusType:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        reasonPhrase:
          type: string
    ConstraintViolationProblem:
      type: object
      properties:
        cause:
          $ref: "#/components/schemas/ThrowableProblem"
        stackTrace:
          type: array
          items:
            $ref: "#/components/schemas/ConstraintViolationProblemStackTraceInner"
        type:
          type: string
          format: uri
        status:
          $ref: "#/components/schemas/StatusType"
        violations:
          type: array
          items:
            $ref: "#/components/schemas/Violation"
        title:
          type: string
        message:
          type: string
        instance:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        detail:
          type: string
        suppressed:
          type: array
          items:
            $ref: "#/components/schemas/ConstraintViolationProblemSuppressedInner"
        localizedMessage:
          type: string
    ConstraintViolationProblemStackTraceInner:
      type: object
      properties:
        classLoaderName:
          type: string
        moduleName:
          type: string
        moduleVersion:
          type: string
        methodName:
          type: string
        fileName:
          type: string
        lineNumber:
          type: integer
          format: int32
        className:
          type: string
        nativeMethod:
          type: boolean
    ConstraintViolationProblemSuppressedInner:
      type: object
      properties:
        stackTrace:
          type: array
          items:
            $ref: "#/components/schemas/ConstraintViolationProblemStackTraceInner"
        message:
          type: string
        localizedMessage:
          type: string
    ThrowableProblem:
      type: object
      properties:
        cause:
          $ref: "#/components/schemas/ThrowableProblem"
        stackTrace:
          type: array
          items:
            $ref: "#/components/schemas/ConstraintViolationProblemStackTraceInner"
        message:
          type: string
        instance:
          type: string
          format: uri
        type:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        status:
          $ref: "#/components/schemas/StatusType"
        detail:
          type: string
        title:
          type: string
        suppressed:
          type: array
          items:
            $ref: "#/components/schemas/ConstraintViolationProblemSuppressedInner"
        localizedMessage:
          type: string
    Violation:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
    DeliveryMethod:
      type: string
      description: Possible delivery methods
      enum:
      - DIGITAL_MAIL
      - SNAIL_MAIL
      - DELIVERY_NOT_POSSIBLE
    PrecheckRecipient:
      type: object
      properties:
        personalIdentityNumber:
          type: string
          description: Personal identity number of the recipient
          example: 19111111-1111
        partyId:
          type: string
          description: Party ID of the recipient
          example: da03b33e-9de2-45ac-8291-31a88de59410
        deliveryMethod:
          $ref: "#/components/schemas/DeliveryMethod"
        reason:
          type: string
          description: Reason when delivery method isn't available or an upstream
            lookup failed
          example: Person not found
      description: Per-recipient delivery capability
    PrecheckResponse:
      type: object
      properties:
        recipients:
          type: array
          description: Per-recipient result
          items:
            $ref: "#/components/schemas/PrecheckRecipient"
      description: Result of precheck for given recipients
    KivraEligibilityRequest:
      required:
      - partyIds
      type: object
      properties:
        partyIds:
          minItems: 1
          type: array
          description: List of party IDs to check for Kivra eligibility
          example:
          - da03b33e-9de2-45ac-8291-31a88de59410
          - eb13b33e-9de2-45ac-8291-31a88de59411
          items:
            type: string
            description: List of party IDs to check for Kivra eligibility
            example: "[\"da03b33e-9de2-45ac-8291-31a88de59410\",\"eb13b33e-9de2-45ac-8291-31a88de59411\"\
              ]"
      description: Kivra eligibility request model
    SmsRecipient:
      type: object
      properties:
        partyId:
          type: string
          description: PartyId is the unique identifier for the recipient
          example: 6d0773d6-3e7f-4552-81bc-f0007af95adf
        phoneNumber:
          type: string
          description: "Phone number of the recipient, used for SMS notifications"
          example: "+46701234567"
      description: SMS recipient model
    SmsRequest:
      required:
      - message
      - recipients
      type: object
      properties:
        message:
          minLength: 1
          type: string
          description: The message to be sent
          example: This is the message to be sent
        recipients:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/SmsRecipient"
      description: SMS request model
    DigitalRegisteredLetterRequest:
      required:
      - body
      - subject
      type: object
      properties:
        body:
          minLength: 1
          type: string
          description: The body of the letter in HTML format
          example: <h1>This is the body of the letter</h1>
        contentType:
          type: string
          description: The content type of the body
          example: text/html
        partyId:
          type: string
          description: The party id of the recipient
          example: 6d0773d6-3e7f-4552-81bc-f0007af95adf
        subject:
          minLength: 1
          type: string
          description: The subject of the letter
          example: This is the subject of the letter
      description: Digital registered letter request model
    Address:
      required:
      - city
      - country
      - firstName
      - lastName
      - street
      - zipCode
      type: object
      properties:
        firstName:
          minLength: 1
          type: string
          description: First name of the recipient
          example: John
        lastName:
          minLength: 1
          type: string
          description: Last name of the recipient
          example: Doe
        street:
          minLength: 1
          type: string
          description: Street address
          example: Main Street 1
        apartmentNumber:
          type: string
          description: Apartment number
          example: "1101"
        careOf:
          type: string
          description: Care of
          example: c/o Jane Doe
        zipCode:
          minLength: 1
          type: string
          description: Zip code
          example: "12345"
        city:
          minLength: 1
          type: string
          description: City
          example: Sundsvall
        country:
          minLength: 1
          type: string
          description: Country
          example: Sweden
      description: Address model
    LetterRequest:
      required:
      - body
      - contentType
      - subject
      type: object
      properties:
        subject:
          minLength: 1
          type: string
          description: The subject of the letter
          example: This is the subject of the letter
        body:
          minLength: 1
          type: string
          description: The body of the letter
          example: This is the body of the letter
        contentType:
          minLength: 1
          type: string
          description: The content type of the body
          example: text/plain
        recipients:
          type: array
          items:
            $ref: "#/components/schemas/Recipient"
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/Address"
      description: Letter request model
    Recipient:
      required:
      - deliveryMethod
      type: object
      properties:
        partyId:
          type: string
          description: PartyId is the unique identifier for the recipient
          example: 6d0773d6-3e7f-4552-81bc-f0007af95adf
        deliveryMethod:
          type: string
          description: Delivery method for the recipient
          example: DIGITAL_MAIL
          enum:
          - DIGITAL_MAIL
          - SNAIL_MAIL
          - DELIVERY_NOT_POSSIBLE
        address:
          $ref: "#/components/schemas/Address"
      description: Recipient model
    LetterCsvRequest:
      required:
      - body
      - contentType
      - subject
      type: object
      properties:
        subject:
          minLength: 1
          type: string
          description: The subject of the letter
          example: This is the subject of the letter
        body:
          minLength: 1
          type: string
          description: The body of the letter
          example: This is the body of the letter
        contentType:
          minLength: 1
          type: string
          description: The content type of the body
          example: text/plain
      description: Letter CSV request model
    Statistics:
      type: object
      properties:
        id:
          type: string
          description: Entity id
          example: f40e6975-a82a-4167-8622-4b0e71ab8d92
        name:
          type: string
          description: Entity name
          example: Test Department
        snailMail:
          type: integer
          description: Number of snail mail sent
          format: int64
          example: 50
        digitalMail:
          type: integer
          description: Number of digital mail sent
          format: int64
          example: 30
        sms:
          type: integer
          description: Number of text messages
          format: int64
          example: 20
        digitalRegisteredLetter:
          type: integer
          description: Number of registered letters sent
          format: int64
          example: 5
      description: Statistics model
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    Message:
      type: object
      properties:
        messageId:
          type: string
          description: Message ID
          readOnly: true
          example: "123456"
        subject:
          type: string
          description: The subject
          readOnly: true
          example: Viktig information
        type:
          type: string
          description: Type of message
          readOnly: true
          example: SMS|LETTER|DIGITAL_REGISTERED_LETTER
        sentAt:
          type: string
          description: When the message was sent
          format: date-time
          readOnly: true
        signingStatus:
          $ref: "#/components/schemas/SigningStatus"
      description: Message model
      readOnly: true
    Messages:
      type: object
      properties:
        messages:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/Message"
        _meta:
          $ref: "#/components/schemas/PagingMetaData"
      description: Messages model
    PagingMetaData:
      type: object
      properties:
        page:
          type: integer
          description: Current page
          format: int32
          readOnly: true
          example: 5
        limit:
          type: integer
          description: Displayed objects per page
          format: int32
          readOnly: true
          example: 20
        count:
          type: integer
          description: Displayed objects on current page
          format: int32
          readOnly: true
          example: 13
        totalRecords:
          type: integer
          description: Total amount of hits based on provided search parameters
          format: int64
          readOnly: true
          example: 98
        totalPages:
          type: integer
          description: Total amount of pages based on provided search parameters
          format: int32
          readOnly: true
          example: 23
      description: PagingMetaData model
      readOnly: true
    SigningStatus:
      type: object
      properties:
        letterState:
          type: string
          description: Present state for the letter
          readOnly: true
          example: NEW|SENT|SIGNED|EXPIRED|FAILED - Client Error|FAILED - Server Error|FAILED
            - Unknown Error
        signingProcessState:
          type: string
          description: Present state for the signing process
          readOnly: true
          example: PENDING|COMPLETED|FAILED
      description: Signing status model
      readOnly: true
    AttachmentDetails:
      type: object
      properties:
        attachmentId:
          type: string
          description: Attachment ID
          readOnly: true
          example: 123e4567-e89b-12d3-a456-426614174000
        fileName:
          type: string
          description: File name of the attachment
          readOnly: true
          example: document.pdf
        contentType:
          type: string
          description: MIME type of the attachment
          readOnly: true
          example: application/pdf
      description: List of attachment details
      readOnly: true
    MessageDetails:
      type: object
      properties:
        subject:
          type: string
          description: Message subject
          readOnly: true
          example: This is a subject
        sentAt:
          type: string
          description: When the message was sent
          format: date-time
          readOnly: true
        attachments:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/AttachmentDetails"
        recipients:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/RecipientDetails"
      description: Message details model
    RecipientDetails:
      type: object
      properties:
        name:
          type: string
          description: Name of the recipient
          readOnly: true
          example: John Doe
        partyId:
          type: string
          description: The recipients party ID
          readOnly: true
          example: "1234567890"
        mobileNumber:
          type: string
          description: Mobile number
          readOnly: true
          example: "+46701234567"
        streetAddress:
          type: string
          description: Street address
          readOnly: true
          example: Main Street 5
        zipCode:
          type: string
          description: Zip code
          readOnly: true
          example: "85751"
        city:
          type: string
          description: City
          readOnly: true
          example: Sundsvall
        messageType:
          type: string
          description: Message type
          readOnly: true
          example: SNAIL_MAIL|DIGITAL_MAIL|SMS
        status:
          type: string
          description: Status of the message to this recipient
          readOnly: true
          example: SENT|NOT_SENT|FAILED
      description: List of recipient details
      readOnly: true
    Device:
      type: object
      properties:
        ipAddress:
          type: string
          description: Ip address used when the letter was signed
      description: Information about the device used when signing the letter
    SigningInformation:
      type: object
      properties:
        status:
          type: string
          description: Status of the signing order
        signedAt:
          type: string
          description: Timestamp when the letter was signed by receiving party
          format: date-time
        contentKey:
          type: string
          description: The unique Kivra id for the signing order
        orderReference:
          type: string
          description: Order reference in Kivra for the signing order
        signature:
          type: string
          description: The signature made by the receiving party
        ocspResponse:
          type: string
          description: Online certificate status protocol for the signing order
        user:
          $ref: "#/components/schemas/User"
        device:
          $ref: "#/components/schemas/Device"
        stepUp:
          $ref: "#/components/schemas/StepUp"
      description: SigningInformation model
    StepUp:
      type: object
      properties:
        mrtd:
          type: boolean
          description: Whether an MRTD check was performed before the order was completed
      description: Step-up information for the signing order
    User:
      type: object
      properties:
        personalIdentityNumber:
          type: string
          description: Personal identity number for the signing party
        name:
          type: string
          description: Full name of the signing party
        givenName:
          type: string
          description: First name of the signing party
        surname:
          type: string
          description: Last name of the signing party
      description: Information about the user that signed the letter
  securitySchemes: {}
